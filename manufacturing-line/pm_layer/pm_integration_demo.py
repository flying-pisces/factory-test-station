#!/usr/bin/env python3\n\"\"\"Complete PM Layer Integration Demo - AI-enabled Manufacturing Plan Optimization.\"\"\"\n\nimport logging\nimport time\nimport json\nfrom pathlib import Path\n\n# PM Layer imports\nfrom manufacturing_plan import (\n    create_sample_manufacturing_plans, LineSimulation, \n    ManufacturingPlan, StationConfig, StationType\n)\nfrom ai_optimizer import (\n    AIManufacturingOptimizer, ManufacturingPlanComparator\n)\nfrom line_visualizer import LineFlowVisualizer, PlanComparisonVisualizer\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n\ndef demonstrate_pm_layer_capabilities():\n    \"\"\"Demonstrate complete PM layer capabilities.\"\"\"\n    print(\"\\n\" + \"=\"*80)\n    print(\"🏭 PRODUCT MANAGEMENT LAYER - AI-ENABLED LINE OPTIMIZATION\")\n    print(\"=\"*80)\n    \n    # Step 1: Generate Base Manufacturing Plans\n    print(\"\\n📋 Step 1: Creating Base Manufacturing Plans...\")\n    base_plans = create_sample_manufacturing_plans()\n    \n    for plan in base_plans:\n        print(f\"  • {plan.plan_name} ({plan.plan_id})\")\n        print(f\"    Target Volume: {plan.target_volume:,} DUTs\")\n        print(f\"    Stations: {len(plan.stations)}\")\n    \n    # Step 2: Simulate Base Plans\n    print(\"\\n🔬 Step 2: Simulating Base Plans...\")\n    base_results = []\n    \n    for plan in base_plans:\n        print(f\"  Simulating {plan.plan_name}...\")\n        simulation = LineSimulation(plan)\n        results = simulation.run_full_simulation()\n        base_results.append(results)\n        \n        metrics = results['plan_metrics']\n        print(f\"    Results: {metrics['actual_yield']:.1%} yield, \"\n              f\"{metrics['actual_mva']:.1f}¥ MVA, \"\n              f\"{metrics['throughput']:.0f} UPH\")\n    \n    # Step 3: AI Optimization\n    print(\"\\n🤖 Step 3: Running AI Optimization...\")\n    \n    optimizer = AIManufacturingOptimizer()\n    \n    # Set optimization objectives (matching your image requirements)\n    optimizer.add_objective('yield', weight=0.4, maximize=True)\n    optimizer.add_objective('mva', weight=0.35, maximize=True) \n    optimizer.add_objective('throughput', weight=0.15, maximize=True)\n    optimizer.add_objective('cost', weight=0.1, maximize=False)\n    \n    # Add constraints\n    optimizer.add_constraint('min_yield', 0.4, '>=')\n    optimizer.add_constraint('min_throughput', 30, '>=')\n    \n    print(f\"  Objectives: Yield (40%), MVA (35%), Throughput (15%), Cost (10%)\")\n    print(f\"  Constraints: Min yield ≥40%, Min throughput ≥30 UPH\")\n    print(f\"  Running {optimizer.max_generations} generations...\")\n    \n    # Run optimization with smaller population for demo\n    optimizer.population_size = 20\n    optimizer.max_generations = 15\n    optimized_plans = optimizer.run_optimization(base_plans)\n    \n    print(f\"  ✅ Generated {len(optimized_plans)} optimized plans\")\n    \n    # Step 4: Plan Comparison and Analysis\n    print(\"\\n📊 Step 4: Comparing All Plans...\")\n    \n    all_plans = base_plans + optimized_plans\n    comparator = ManufacturingPlanComparator()\n    comparison = comparator.compare_plans(all_plans)\n    \n    # Step 5: Display Results\n    print(\"\\n📈 Step 5: Analysis Results\")\n    print(\"-\" * 50)\n    \n    # Display plan comparison table\n    print(f\"{'Plan ID':<15} {'Yield':<8} {'MVA':<8} {'UPH':<6} {'Status':<15}\")\n    print(\"-\" * 60)\n    \n    for plan_data in comparison['plans']:\n        plan_id = plan_data['plan_id']\n        metrics = plan_data['metrics']\n        is_pareto = plan_id in comparison.get('pareto_optimal', [])\n        \n        yield_str = f\"{metrics['actual_yield']:.1%}\" if metrics['actual_yield'] else 'N/A'\n        mva_str = f\"{metrics['actual_mva']:.1f}¥\" if metrics['actual_mva'] else 'N/A'\n        uph_str = f\"{metrics['throughput']:.0f}\" if metrics['throughput'] else 'N/A'\n        status = \"🏆 Pareto Optimal\" if is_pareto else \"Standard\"\n        \n        print(f\"{plan_id:<15} {yield_str:<8} {mva_str:<8} {uph_str:<6} {status:<15}\")\n    \n    # Display summary statistics\n    summary = comparison['summary']\n    print(\"\\n📋 Summary Statistics:\")\n    if 'yield_range' in summary:\n        yield_range = summary['yield_range']\n        print(f\"  Yield Range: {yield_range['min']:.1%} - {yield_range['max']:.1%} (avg: {yield_range['avg']:.1%})\")\n    \n    if 'mva_range' in summary:\n        mva_range = summary['mva_range'] \n        print(f\"  MVA Range: {mva_range['min']:.1f}¥ - {mva_range['max']:.1f}¥ (avg: {mva_range['avg']:.1f}¥)\")\n    \n    # Display recommendations\n    print(\"\\n💡 AI Recommendations:\")\n    for rec in comparison['recommendations']:\n        print(f\"  • {rec}\")\n    \n    # Step 6: Detailed DUT Flow Analysis\n    print(\"\\n🔄 Step 6: DUT Flow Analysis\")\n    print(\"-\" * 40)\n    \n    # Show detailed flow for best performing plan\n    if comparison['pareto_optimal']:\n        best_plan_id = comparison['pareto_optimal'][0]\n        best_plan_data = next(p for p in comparison['plans'] if p['plan_id'] == best_plan_id)\n        \n        print(f\"Analyzing DUT flow for best plan: {best_plan_id}\")\n        \n        # Show station-by-station yield loss\n        station_perf = best_plan_data['station_performance']\n        print(\"\\nStation Performance:\")\n        print(f\"{'Station':<10} {'Processed':<10} {'Passed':<8} {'Failed':<8} {'Yield':<8}\")\n        print(\"-\" * 50)\n        \n        for station_id, metrics in station_perf.items():\n            processed = metrics['processed_count']\n            passed = metrics['passed_count']\n            failed = metrics['failed_count']\n            yield_rate = metrics['yield_rate']\n            \n            print(f\"{station_id:<10} {processed:<10} {passed:<8} {failed:<8} {yield_rate:.1%}\")\n    \n    # Step 7: Show Manufacturing Plan Visualization Concept\n    print(\"\\n🎨 Step 7: Visualization Concept\")\n    print(\"-\" * 35)\n    \n    print(\"Manufacturing line layout visualization shows:\")\n    print(\"  📦 DUT Generation: Operators load DUTs onto conveyor\")\n    print(\"  🔄 Conveyor Flow: DUTs move between stations\")\n    print(\"  🏭 Station Processing: Each station processes DUTs with specific yield\")\n    print(\"  📊 Yield Loss Sources:\")\n    print(\"    - Material defects (incoming)\")\n    print(\"    - Test-induced failures\")\n    print(\"    - Process variations\")\n    print(\"  📈 Real-time Metrics: UPH, yield, bottlenecks, cost\")\n    \n    # Step 8: Export Results\n    print(\"\\n💾 Step 8: Exporting Results...\")\n    \n    # Create output directory\n    output_dir = Path(\"pm_layer_results\")\n    output_dir.mkdir(exist_ok=True)\n    \n    # Export plan details\n    for i, plan in enumerate(all_plans):\n        plan_data = {\n            'plan_id': plan.plan_id,\n            'plan_name': plan.plan_name,\n            'target_volume': plan.target_volume,\n            'stations': [{\n                'station_id': s.station_id,\n                'station_type': s.station_type.value,\n                'position': s.position,\n                'yield_rate': s.yield_rate,\n                'process_time': s.process_time,\n                'process_cost': s.process_cost,\n                'capacity': s.capacity\n            } for s in plan.stations],\n            'performance': {\n                'actual_yield': plan.actual_yield,\n                'actual_mva': plan.actual_mva,\n                'total_cost': plan.total_cost,\n                'throughput': plan.throughput\n            }\n        }\n        \n        with open(output_dir / f\"plan_{plan.plan_id}.json\", 'w') as f:\n            json.dump(plan_data, f, indent=2)\n    \n    # Export comparison results\n    with open(output_dir / \"comparison_analysis.json\", 'w') as f:\n        json.dump(comparison, f, indent=2, default=str)\n    \n    print(f\"  ✅ Exported {len(all_plans)} plan configurations\")\n    print(f\"  ✅ Exported comparison analysis\")\n    print(f\"  📁 Results saved to: {output_dir.absolute()}\")\n    \n    # Step 9: Integration with Manufacturing Line System\n    print(\"\\n🔗 Step 9: Integration Architecture\")\n    print(\"-\" * 40)\n    \n    print(\"PM Layer integrates with manufacturing line system through:\")\n    print(\"  🎯 Plan Selection: Choose optimal manufacturing plan\")\n    print(\"  ⚙️  Configuration: Push station configs to line controller\")\n    print(\"  📊 Monitoring: Real-time performance vs predicted\")\n    print(\"  🔄 Feedback Loop: Actual data improves future optimization\")\n    print(\"  🤖 Adaptive Planning: Automatically adjust plans based on conditions\")\n    \n    integration_example = {\n        'selected_plan': comparison['pareto_optimal'][0] if comparison['pareto_optimal'] else base_plans[0].plan_id,\n        'deployment_config': {\n            'line_id': 'SMT_FATP_LINE_01',\n            'deployment_time': time.time(),\n            'expected_performance': {\n                'yield': f\"{comparison['plans'][0]['metrics']['actual_yield']:.1%}\",\n                'mva': f\"{comparison['plans'][0]['metrics']['actual_mva']:.1f}¥\",\n                'throughput': f\"{comparison['plans'][0]['metrics']['throughput']:.0f} UPH\"\n            },\n            'monitoring_parameters': {\n                'yield_alert_threshold': 0.05,  # Alert if yield drops 5% below predicted\n                'throughput_alert_threshold': 0.1,  # Alert if throughput drops 10%\n                'reoptimization_trigger': 'daily'  # Rerun optimization daily\n            }\n        }\n    }\n    \n    with open(output_dir / \"integration_config.json\", 'w') as f:\n        json.dump(integration_example, f, indent=2)\n    \n    print(f\"  ✅ Generated integration configuration\")\n    \n    # Final Summary\n    print(\"\\n\" + \"=\"*80)\n    print(\"🎯 PM LAYER DEMONSTRATION COMPLETE\")\n    print(\"=\"*80)\n    \n    if comparison['pareto_optimal']:\n        best_plan = comparison['pareto_optimal'][0]\n        best_metrics = next(p['metrics'] for p in comparison['plans'] if p['plan_id'] == best_plan)\n        \n        print(f\"\\n🏆 RECOMMENDED PLAN: {best_plan}\")\n        print(f\"   📈 Predicted Yield: {best_metrics['actual_yield']:.1%}\")\n        print(f\"   💰 Predicted MVA: {best_metrics['actual_mva']:.1f}¥\")\n        print(f\"   ⚡ Predicted Throughput: {best_metrics['throughput']:.0f} UPH\")\n    \n    print(\"\\n🔄 DIGITIZATION IMPACT:\")\n    print(\"   • Traditional: Manual plan selection, static configurations\")\n    print(\"   • AI-Enabled: Automated optimization, adaptive planning\")\n    print(\"   • Benefit: Optimal yield/MVA trade-off, predictive insights\")\n    \n    print(\"\\n📊 READY FOR DEPLOYMENT:\")\n    print(f\"   • {len(all_plans)} manufacturing plans evaluated\")\n    print(f\"   • {len(comparison['pareto_optimal'])} Pareto optimal solutions identified\")\n    print(f\"   • Integration configs generated for line deployment\")\n    print(f\"   • Real-time monitoring parameters configured\")\n    \n    return all_plans, comparison\n\n\ndef simulate_real_time_optimization():\n    \"\"\"Simulate real-time plan optimization based on changing conditions.\"\"\"\n    print(\"\\n🔄 SIMULATING REAL-TIME OPTIMIZATION\")\n    print(\"-\" * 45)\n    \n    # Simulate changing market conditions\n    scenarios = [\n        {\n            'name': 'High Volume Demand',\n            'target_volume': 15000,\n            'yield_priority': 0.3,\n            'throughput_priority': 0.5\n        },\n        {\n            'name': 'Premium Product Run', \n            'target_volume': 5000,\n            'yield_priority': 0.6,\n            'mva_priority': 0.4\n        },\n        {\n            'name': 'Cost Reduction Focus',\n            'target_volume': 10000,\n            'yield_priority': 0.2,\n            'cost_priority': 0.6\n        }\n    ]\n    \n    for scenario in scenarios:\n        print(f\"\\n📋 Scenario: {scenario['name']}\")\n        print(f\"   Target Volume: {scenario['target_volume']:,} DUTs\")\n        \n        # Quick re-optimization for scenario\n        optimizer = AIManufacturingOptimizer()\n        optimizer.population_size = 10\n        optimizer.max_generations = 5\n        \n        # Adjust objectives based on scenario\n        if 'yield_priority' in scenario:\n            optimizer.add_objective('yield', scenario['yield_priority'], True)\n        if 'throughput_priority' in scenario:\n            optimizer.add_objective('throughput', scenario['throughput_priority'], True)\n        if 'mva_priority' in scenario:\n            optimizer.add_objective('mva', scenario['mva_priority'], True)\n        if 'cost_priority' in scenario:\n            optimizer.add_objective('cost', scenario['cost_priority'], False)\n        \n        # Run quick optimization\n        base_plans = create_sample_manufacturing_plans()\n        optimized = optimizer.run_optimization(base_plans)\n        \n        if optimized:\n            best_plan = optimized[0]\n            print(f\"   🎯 Optimized Plan: {best_plan.plan_id}\")\n            print(f\"   📈 Expected Yield: {best_plan.actual_yield:.1%}\")\n            print(f\"   💰 Expected MVA: {best_plan.actual_mva:.1f}¥\")\n            print(f\"   ⚡ Expected Throughput: {best_plan.throughput:.0f} UPH\")\n    \n    print(\"\\n✅ Real-time optimization simulation complete\")\n    print(\"   AI system can adapt manufacturing plans to changing requirements\")\n\n\nif __name__ == \"__main__\":\n    # Run complete demonstration\n    plans, comparison = demonstrate_pm_layer_capabilities()\n    \n    # Show real-time optimization capabilities\n    simulate_real_time_optimization()\n    \n    print(\"\\n🎉 PM Layer demonstration complete!\")\n    print(\"   Ready for integration with manufacturing line system.\")